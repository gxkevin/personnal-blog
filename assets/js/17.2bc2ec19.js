(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{362:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("我们首先来看一下 "),a("code",[t._v("async/await")]),t._v("的解释：")]),t._v(" "),a("p",[t._v("如果你在代码中使用了异步函数，就会发现它的语法和结构会更像是标准的同步函数。")]),t._v(" "),a("p",[t._v("现在我们一般使用"),a("code",[t._v("promise")]),t._v("来解决异步编程的问题,相比之前刚开始使用回调的时候，"),a("code",[t._v("Promise")]),t._v("的"),a("code",[t._v("then")]),t._v("方法显得非常好用，清晰，易懂。但是当我们如果有多个相互依赖的请求。")]),t._v(" "),a("p",[t._v("有两个问题： 1.难以理解执行顺序 2.代码不太好读")]),t._v(" "),a("p",[t._v("所以就诞生了"),a("code",[t._v("async")]),t._v("和"),a("code",[t._v("await")]),t._v("。（"),a("code",[t._v("异步函数像是标准的同步函数")]),t._v("）。将人类大脑的负担减少。")]),t._v(" "),a("p",[a("code",[t._v("async")]),t._v(" 函数返回的是一个"),a("code",[t._v("Promise")]),t._v("对象，如果函数中有返回值。则通过"),a("code",[t._v("Promise.resole()")]),t._v("封装成"),a("code",[t._v("Promise")]),t._v("对象，当然我们就可以使用"),a("code",[t._v("then()")]),t._v("就可以取出这个值。"),a("code",[t._v("async")]),t._v("只能配套和"),a("code",[t._v("await")]),t._v("使用，单独使用就会报错。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("await")]),t._v(" 后面接受一个"),a("code",[t._v("Promise")]),t._v(" 对象。当"),a("code",[t._v("Promise")]),t._v("对象状态变化的时候，得到返回值。"),a("code",[t._v("async")]),t._v("函数完全可以看作多个异步操作，封装成的一个"),a("code",[t._v("Promise")]),t._v("对象，而"),a("code",[t._v("await")]),t._v("就是内部"),a("code",[t._v("then")]),t._v("命令的语法糖，用同步的书写方式实现异步代码。")]),t._v(" "),a("h2",{attrs:{id:"错误处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误处理"}},[t._v("#")]),t._v(" 错误处理")]),t._v(" "),a("p",[t._v("如果"),a("code",[t._v("await")]),t._v("后面的异步操作出错，那么等同于async函数返回的 "),a("code",[t._v("Promise")]),t._v(" 对象被"),a("code",[t._v("reject")]),t._v("。")]),t._v(" "),a("p",[t._v("防止出错的方法就是我们将其放在"),a("code",[t._v("try/catch")]),t._v("代码块中。并且能够捕获异常。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'error'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);