(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{366:function(n,e,t){"use strict";t.r(e);var o=t(42),r=Object(o.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("用现实生活中的例子举例。\n1.我们知道玩游戏的时候有个设定叫垂直同步，可以强制要求游戏画面的刷新率限制在60fps以内，这样我们的显卡就不会在每次渲染游戏画面的时候，拼劲全力渲染最高帧数。60fps既可以满足大家的肉眼游戏需求，还可以让显卡一直稳定工作，不至于一直高强度工作，大大提升了显卡的使用寿命。当60fps就可以满足人类需求的时候，渲染到100，200，300就造成了资源上面的浪费，电费的浪费，显卡寿命的缩短等等。\n2.坐公交车，假设公交车一次只能拉一个人，50个人要坐公交车的话公交车就要路线走50次才能拉完这些人，这就是一种浪费资源的行为。一般我们在现实生活中，公交车到站了，司机会一直等待到没有人想要坐公交车了，才开车出发。（相对于之前的一次只拉一个人，这次的一直要在一个站拉到没人要坐为止，就是一种节约资源的方式）")]),n._v(" "),t("ul",[t("li",[n._v("函数节流：指定时间间隔内只会执行一次任务。")]),n._v(" "),t("li",[n._v("函数防抖动：在任务频繁触发的情况下，只有任务触发的间隔超过指定间隔的时候，任务才会执行。")])]),n._v(" "),t("h2",{attrs:{id:"函数节流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数节流"}},[n._v("#")]),n._v(" 函数节流")]),n._v(" "),t("p",[n._v("这里以判断页面是否滚动到底部为例子，普通的做法就是监听"),t("code",[n._v("window")]),n._v("对象的"),t("code",[n._v("scroll")]),n._v("事件，然后在函数体中写入判断是否滚动到底部的逻辑：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    function onScroll() {\n    // 判断是否滚动到底部的逻辑\n    const pageHeight = $('body').height();\n    const scrollTop = $(window).scrollTop();\n    const winHeight = $(window).height();\n    const thresold = pageHeight - scrollTop - winHeight;\n\n    if (thresold > -100 && thresold <= 20) {\n        console.log('end');\n    }\n}\n\n$(window).on('scroll', onScroll);\n")])])]),t("p",[t("a",{attrs:{href:"https://codepen.io/limiu331/pen/qBONJQj?editors=1111",target:"_blank",rel:"noopener noreferrer"}},[n._v("预览地址"),t("OutboundLink")],1)]),n._v(" "),t("p",[n._v("这样做的一个缺点就是比较消耗性能，因为当在滚动的时候，浏览器会无时不刻地在计算判断是否滚动到底部的逻辑，而在实际的场景中是不需要这么做的，在实际场景中可能是这样的：在滚动过程中，每隔一段时间在去计算这个判断逻辑。而函数节流所做的工作就是每隔一段时间去执行一次原本需要无时不刻地在执行的函数，所以在滚动事件中引入函数的节流是一个非常好的实践：")]),n._v(" "),t("p",[t("a",{attrs:{href:"https://codepen.io/limiu331/pen/yLYaOwL?editors=1111",target:"_blank",rel:"noopener noreferrer"}},[n._v("预览地址"),t("OutboundLink")],1)]),n._v(" "),t("h2",{attrs:{id:"函数防抖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数防抖"}},[n._v("#")]),n._v(" 函数防抖")]),n._v(" "),t("p",[n._v("这里以一个文章缓存功能为例子。如果一个网站比如xx文档，要实现用户打字后自动上传到服务器并保存的功能，如果用户每输入一个字符就去向服务器申请保存一次，上万甚至上千万百万用户一起使用的时候，就会大大增加服务器的负荷。\n那我们应该怎么节省资源来做这件事呢？我们应该找一个时间，当用户停止输入一段时间的时候再去申请一次服务器保存，这样就大大节省了多次申请带来的资源浪费，而且我们也保存到了用户的正常输入内容。")]),n._v(" "),t("p",[n._v("我们如何去判断一个用户已经停止了输入呢？当然是通过我们的输入框，如果在我们限定的时间段内，输入框的内容没有发生任何变化，那我们就可以认为用户停止输入了，就可以向服务器申请保存了。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("  let timer;\n    const input = document.querySelector('input');\n\n    input.addEventListener('input', function() {\n        clearTimeout(timer);\n        timer = setTimeout(function() {\n            //保存\n        }, 800)\n    })\n")])])]),t("p",[t("a",{attrs:{href:"https://codepen.io/limiu331/pen/gOawMrZ?editors=1111",target:"_blank",rel:"noopener noreferrer"}},[n._v("预览地址"),t("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);